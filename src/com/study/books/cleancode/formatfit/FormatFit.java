package com.study.books.cleancode.formatfit;

/* 프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야한다! */
public class FormatFit {

    /* 형식을 맞추는 목적
        코드 형식은 중요하다!
        코드 형식은 의사소토으이 일환이다. 의사소통은 전문 개발자의 일차적인 의무다.
        오늘 구현한 기능이 다음 버전에서 바뀔 확률은 아주 높다.
        그런데 오늘 구현한 코드의 가독성은 앞으로 바뀔 코드의 품질에 지대한 영향을 미친다. */

    /* 적절한 행 길이를 유지하라
        소스 코드는 얼마나 길어야 적당할까?
        500줄을 넘지 않고 대부분 200줄 정도인 파일로도 커다란 시스템을 구축할 수 있다는 사실이다.
        반드시 지킬 엄격한 규칙은 아니지만 바람직한 규칙으로 삼으면 좋겠다.
        일반적으로 큰 파일보다 작은 파일이 이해하기 쉼다. */

    /* 세로형식
        1. 신문 기사처럼 작성하라
        이름은 간단하면서도 설명이 가능하게 짓는다.
        이름만 보고도 올바른 모듈을 살펴보고 있는 아닌지를 판단할 정도로 신경 써서 짓는다.
        소스 파일 첫 부분은 고차원 개념과 알고리즘을 설명한다.
        아래로 내려갈수록 의도를 세세하게 묘사한다.

        2. 개념은 빈 행으로 분리하라
        패키지 선언부, import 문, 각 함수 사이에 빈 행이 들어간다.
        빈 행은 새로운 개념을 시작한다는 시각적 단서이다.
        코드를 읽어 내려가다 보면 빈 행 바로 다음 줄에 눈길이 멈춘다.

        3. 세로 밀집도
        줄바꿈이 개념을 분리한다면 세로 밀집도는 연관성을 의미한다.
        즉, 서로 밀접한 코드 행은 세로로 가까이 놓여야 한다는 뜻이다.

        4. 수직 거리
        시스템이 무엇을 하는지 이해하고 싶은데, 이 조각 저 조각이 어디에 있는지 찾고 기억하느라 시간과 노력을 소모한다.
        서로 밀접한 개념은 세로로 가까이 둬야 한다.
        같은 파일에 속할 정도로 밀접한 두 개념은 세로 거리로 연관성을 표현한다.
        연관성이 깊은 두 개념이 멀리 떨어져 있으면 코드를 읽는 사람이 소스 파일과 클래스를 여기저기 뒤지게 된다.

        5. 변수 선언
        변수는 사용하는 위치에 최대한 가까이 선언한다.
        지역 변수는 각 함수 맨 처음에 선언한다.
        루프를 제어하는 변수는 흔히 루프 문 내부에 선언한다.
        긴 함수에서 블록 상단이나 루프 직전에 변수를 선언하는 사례도 있다.
        반면 인스턴스 변수는 클래스 맨 처음에 선언한다.
        잘 설계한 클래스는 많은 클래스 메서드가 인스턴스 뱐수를 사용하기 때문이다.

        6. 종속 함수
        한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다.
        호출하는 함수를 호출되는 함수보다 먼저 배치한다.

        7. 개념적 유사성
        개념적인 친화도가 높을수록 코드를 가까이 배치한다.
        친화도가 높은 요인은 여러 가지다.
        - 한 함수가 다른 함수를 호출해 생기는 직접적인 종속성
        - 변수와 그 변수를 사용하는 함수
        - 비슷한 동작을 수행하는 일군의 함수

        8. 세로 순서
        함수 호출 종속성은 아래 방향으로 유지한다.
        호출되는 함수를 호출하는 함수보다 나중에 배치한다.
        가장 중요한 개념을 가장 먼저 표현한다.
        세세한 사항은 가장 마지막에 표현한다. */

    /* 가로 형식
        한 행은 가로로 얼마나 길어야 적당할까?
        예전에는 오른쪽으로 스크롤할 필요가 절대로 없게 코드를 짰다.
        개인적으로는 120자 정도로 행 길이를 제한한다.

        1. 가로 공백과 밀집도
        가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현한다. */
    private void measureLinc(String line) {
        // 함수 이름과 이어지는 괄호 사이에는 공백을 넣지 않았다. 함수와 인수는 서로 밀접하기 때문이다.
        int lineSize = line.length();
        // 할당 연산자를 강조하려고 앞뒤에 공백을 줬다.
        // 공백을 넣으면 두 가지 주요 요소가 확실하게 나뉜다는 사실이 더욱 분명해진다.
    }

    private static double determinant(double a, double b, double c) {
        return b*b - 4*a*c;
        // 승수 사이에는 공백이 없다. 곱셈은 우선순위가 가장 높기 때문이다.
        // 항 사이에는 공백이 들어간다. 덧셈과 뺄셈은 우선순위가 곱셈보다 낮기 때문이다.
    }
    /*
        2. 가로 정렬
        선언문과 할당문을 별도로 정렬하지 않는다.
        정렬하지 않으면 오히려 중대한 결함을 찾기 쉼다.

        3. 들여쓰기
        소스 파일은 윤과도와 계층이 비슷하다.
        범위로 이루어진 계청을 표현하기 위해 우리는 코드를 들여쓴다.
        들여쓰는 정도는 계층에서 코드가 자리잡은 수준에 비례한다.

        4. 들여쓰기 무시하기
        때로는 간단한 if 문, 짧은 while 문, 짧은 함수에서 들여쓰기 규칙을 무시하고픈 유혹이 생긴다.
        이런 유혹에 빠질 때마다 항상 원점으로 돌아가 들여쓰기를 넣자.

        5. 가짜 범위
        때로는 빈 while 문이나 for 문을 접한다.
        피하지 못할 때는 빈 블록을 올바로 들여쓰고 괄호로 감싸자. */

    /* 팀 규칙
        프로그래머라면 각자 선호하는 규칙이 있다.
        하지만 팀에 속한다면 자신이 선호해야 할 규칙은 바로 팀 규칙이다.
        좋은 소프트웨어 시스템은 읽기 쉬운 문서로 이뤄진다는 사실을 기억하기 바란다! */


}
