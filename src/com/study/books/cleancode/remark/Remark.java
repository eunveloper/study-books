package com.study.books.cleancode.remark;

import com.study.books.cleancode.function.obj.EmployeeRecord;
import com.study.books.cleancode.remark.obj.Module;
import com.study.books.cleancode.remark.obj.SubSysMod;

import java.util.ArrayList;

public class Remark {

    private static final boolean HOURLY_FLAG = true;

    /* 코드를 깔끔하게 정리하고 표현혁을 강화하는 방향으로,
        그래서 애초에 주석이 필요 없는 방향으로 개발을 하자.
        부정확한 주석은 아예 없는 주석보다 훨씬 나쁘다! */

    /* 주석은 나쁜 코드를 보완하지 못한다.
        코드에 주석을 추가하는 일반적인 이유는 코드 품질이 나쁘기 때문이다.
        자신이 저지른 난장판을 주석으로 설명하려 애쓰는 대신에 그 난장판을 깨끗이 치우는 데 시간을 보내라! */

    /* 코드로 의도를 표현하라!
        많은 경우 주석으로 달려는 설명을 함수로 만들어 표현해도 충분하다. */
    public void func() {
        EmployeeRecord employee = new EmployeeRecord();
        // 직원에게 복지 혜택을 받을 자격이 있는지 검사한다
        if ((employee.flags & HOURLY_FLAG) && employee.age > 65);
        /* 위처럼 비지니스 로직을 주석으로 설명하는 거보다 적절한 함수명을 짓는게 더 좋다! */
        if (employee.isEligibleForFullBenefits());
    }

    /* 좋은 주석 : 어떤 주석은 필요하거나 유익하다!
        1. 법적인 주석
        회사가 정립한 구현 표준에 맞춰 법적인 이유로 특정  주석을 넣으라고 명시한다.
        2. 정보를 제공하는 주석
        때로는 기본적인 정보를 주석으로 제공하면 편리하다.
        때때로 정보를 제공하는 주석이 유용하다 할지라도, 가능하다면 함수 이름에 정보를 담는 편이 더 좋다.
        3. 의도를 설명하는 주석
        구현을 이해하게 도와주는 선을 넘어 결정에 깔린 의도까지 설명한다.
        4. 의도를 명료하게 밝히는 주석
        인수나 반환값이 표준 라이브러리나 변경하지 못하는 코드에 속한다면 의미를 명료하게 밝히는 주석이 유용하다.
        하지만 주석이 올바른지 검증하기는 쉽지 않다.
        5. 결과를 경고하는 주석
        다른 프로그래머에게 결과를 경고할 목적으로 주석을 사용하곤 한다.
        6. TODO 주석
        앞으로 할 일을 TODO 주석으로 남겨두면 편하다.
        프로그래머가 필요하다 여기지만 당장 구현하기 어려운 업무를 기술한다.
        7. 중요성을 강조하는 주석
        자짓 대수롭지 않다고 여겨질 뭔가의 중요성을 강조하기 위해서도 주석을 사용한다.
        8. 공개 API 에서 Javadocs
        설명이 잘 된 공개 API 는 참으로 유용하고 만족스럽다.
        표준 자바 라이브러리에서 사용한 Javadocs 가 좋은 예다. */

    /* 나쁜 주석 : 대다수 주석이 이 범주에 속한다.
        1. 주절거리는 주석
        특별한 이유 없이 의무감으로 혹은 프로세스에서 하라고 하니까 마지못해 주석을 단다면 전적으로 시간낭비다.
        2. 같은 이야기를 중복하는 주석
        헤더에 달린 주석이 같은 코드 내용을 그대로 중복한다.
        주석이 코드보다 더 많은 정보를 제공하지 못한다.
        3. 오해할 여지가 있는 주석
        의도는 좋았으나 프로그래머가 딱 맞을 정도로 엄밀하게는 주석을 달지 못하기도 한다.
        주석에 담긴 살짝 잘못된 정보로 인해 프로그래머가 골머리를 앓는다.
        4. 의무적으로 다는 주석
        모든 함수에 javadocs 를 달거나 모든 변수에 주석을 달아야 한다는 규칙은 어리석기 그지없다.
        5. 이력을 기록하는 주석
        예전에는 모든 모듈 첫머리에 변경 이력을 기록하고 관리하는 관례가 바람직했다.
        하지만 이제는 혼란만 가중할 뿐이다. 완전히 제거하는 편이 좋다.
        6. 있으나 마나 한 주석
        쉽게 말해, 너무 당연한 사실을 언급하며 새로운 정보를 제공하지 못하는 주석이다.
        있으나 마나 한 주석을 달려는 유혹에서 벗어나 코드를 정리하라.
        7. 무서운 잡음
        함수나 변수로 표현할 수 있다면 주석을 달지 마라 */
    public void module() {
        // 전역 목록 <module>에 속하는 모듈이 우리가 속한 하위 시스템에 의존하는가?
        Module module = new Module();
        SubSysMod subSysMod = new SubSysMod();
        if (module.getDependSubsystems().contains(subSysMod.getSubSystem()));

        ArrayList moduleDependencies = module.getDependSubsystems();
        String ourSubSystem = subSysMod.getSubSystem();
        if (moduleDependencies.contains(ourSubSystem));
    }
    /* 8. 위치를 표시하는 주석
        배너 아래 특정 기능을 모아놓으면 유용한 경우도 있지만 극히 드물고 가독성만 낮추므로 제거해야 마땅하다.
        9. 닫는 괄호에 다는 주석
        중첩이 심하고 장황한 함수라면 의미가 있을지도 모르지만
        작고 캡슐화된 함수에는 잡읍일 뿐이다.
        10. 공로를 돌리거나 저자를 표시하는 주석
        소스 코드 관리 시스템은 누가 언제 무엇을 추가했는지 귀신처럼 기억한다.
        저자 이름으로 코드를 오염시킬 필요가 없다.
        11. 주석으로 처리한 코드
        주석으로 처리한 코드만큼 밉살스러운 관행도 드물다.
        다음과 같은 코드는 작성하지 마라!
        주석으로 처리된 코드는 다른 사람들이 자우기를 주저한다.
        이유가 있어 남겨놓았으리라고, 중요하니까 지우면 안 된다고 생각하다.
        12. HTML 주석
        소스 코드에 HTML 주석은 혐오 그 자체다.
        13. 전역 정보
        주석을 달아야 한다면 근처에 있는 코드만 기술하라.
        14. 너무 많은 정보
        주석에다 흥미로운 역사나 관련 없는 정보를 장황하게 늘어놓지 마라.
        15. 모호한 관계
        주석과 주석이 설명하는 코드는 둘 사이 관계가 명백해야 한다.
        이왕 공들여 주석을 달았다면 적어도 독자가 주석과 코드를 읽어보고 무슨 소린지 알아야 하지 않겠는가?
        16. 함수 헤더
        짧은 함수는 긴 설명이 필요 없다.
        짧고 한 가지만 수행하며 이름을 잘 붙힌 함수가 주석으로 헤더를 추가한 함수보다 훨씬 좋다.
        17. 비공개 코드에서 javadocs
        공개 API 는 javadocs 가 유용하지만 공개하지 않을 코드라면 javadocs 는 쓸모가 없다. */

}
